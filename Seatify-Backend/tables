create database Seatify;
use Seatify;

CREATE TABLE Users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    role ENUM('admin', 'customer') NOT NULL DEFAULT 'customer',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Movies (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    duration INT NOT NULL, -- in minutes
    language VARCHAR(50),
    genre VARCHAR(255),
    release_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Cinemas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    location VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Cinema_Halls (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cinema_id INT, -- Foreign Key referencing Cinemas
    hall_name VARCHAR(255) NOT NULL,
    total_seats INT NOT NULL,
    FOREIGN KEY (cinema_id) REFERENCES Cinemas(id) ON DELETE CASCADE
);

CREATE TABLE Shows (
    id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT, -- Movie being played
    cinema_hall_id INT, -- Hall where it's played
    show_time DATETIME NOT NULL, -- Show timing
    ticket_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES Movies(id) ON DELETE CASCADE,
    FOREIGN KEY (cinema_hall_id) REFERENCES Cinema_Halls(id) ON DELETE CASCADE
);

CREATE TABLE Show_Seats (
    id INT PRIMARY KEY AUTO_INCREMENT,
    show_id INT, -- Show ID
    seat_number VARCHAR(10) NOT NULL,
    seat_type ENUM('Regular', 'Premium', 'VIP') NOT NULL,
    is_booked BOOLEAN DEFAULT FALSE, -- Whether seat is booked or not
    FOREIGN KEY (show_id) REFERENCES Shows(id) ON DELETE CASCADE
);

CREATE TABLE Bookings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT, -- Customer booking the ticket
    show_id INT, -- Show for which ticket is booked
    total_price DECIMAL(10,2) NOT NULL, -- price * quantity
    booking_status ENUM('confirmed', 'cancelled') DEFAULT 'confirmed',
    booked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
    FOREIGN KEY (show_id) REFERENCES Shows(id) ON DELETE CASCADE
);

CREATE TABLE Booking_Seats (
    id INT PRIMARY KEY AUTO_INCREMENT,
    booking_id INT, -- Booking reference
    seat_id INT, -- Seat booked
    FOREIGN KEY (booking_id) REFERENCES Bookings(id) ON DELETE CASCADE,
    FOREIGN KEY (seat_id) REFERENCES Show_Seats(id) ON DELETE CASCADE
);
